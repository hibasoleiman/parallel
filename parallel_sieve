#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

void parallel_sieve(int n_primes) {
    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);  // Get the rank of this process
    MPI_Comm_size(MPI_COMM_WORLD, &size);  // Get the total number of processes

    // Check if the number of processes matches the number of primes requested
    if (size != n_primes) {
        if (rank == 0) {
            fprintf(stderr, "Error: The number of processes (%d) must equal the number of primes to find (%d).\n", size, n_primes);
        }
        MPI_Finalize();  // Finalize MPI before exiting
        exit(EXIT_FAILURE);
    }

    int num = 2;  // Starting number to check for primes
    int prime_count = 0;  // Number of primes found
    int primes[n_primes];  // Array to store found primes in Process 0
    double start_time, end_time;

    // Process 0 is responsible for generating numbers and starting the pipeline
    if (rank == 0) {
        start_time = MPI_Wtime();  // Start timing the process

        while (prime_count < n_primes) {  // Loop until we find the specified number of primes
            bool is_prime = true;
            for (int i = 0; i < prime_count; i++) {
                if (num % primes[i] == 0) {  // Check if `num` is divisible by any previous primes
                    is_prime = false;  // `num` is not prime
                    break;  // Stop checking further
                }
            }

            if (is_prime) {  // If `num` is a prime
                // Send the prime number to the next process
                MPI_Send(&num, 1, MPI_INT, rank + 1, 0, MPI_COMM_WORLD);  // Send `num` to Process 1
                primes[prime_count++] = num;  // Add `num` to the list of found primes
                printf("Process 0 found prime %d\n", num);  // Debug print to show found primes
            }

            num++;  // Move to the next candidate number
        }

        // Send the termination signal after finding the required number of primes
        int termination_signal = -1;
        MPI_Send(&termination_signal, 1, MPI_INT, 1, 0, MPI_COMM_WORLD);  // Signal the end to Process 1

        end_time = MPI_Wtime();
        printf("Parallel Execution Time: %f seconds\n", end_time - start_time);
        printf("Primes found by Process 0: ");
        for (int i = 0; i < prime_count; i++) {
            printf("%d ", primes[i]);
        }
        printf("\n");

    } else {
        // All other processes act as filters
        int prime;
        MPI_Recv(&prime, 1, MPI_INT, rank - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);  // Receive prime from previous process

        if (prime == -1) {  // Check for termination signal
            if (rank + 1 < size) {
                MPI_Send(&prime, 1, MPI_INT, rank + 1, 0, MPI_COMM_WORLD);  // Forward termination signal
            }
            return;
        }

        while (1) {  // Loop to continuously receive and process numbers
            int candidate;
            MPI_Recv(&candidate, 1, MPI_INT, rank - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);  // Receive candidate

            if (candidate == -1) {  // Check for termination signal
                if (rank + 1 < size) {
                    MPI_Send(&candidate, 1, MPI_INT, rank + 1, 0, MPI_COMM_WORLD);  // Forward termination signal
                }
                break;  // Exit the loop upon receiving termination signal
            }

            if (candidate % prime != 0) {  // Filter check
                if (rank + 1 < size) {
                    MPI_Send(&candidate, 1, MPI_INT, rank + 1, 0, MPI_COMM_WORLD);  // Forward to next process
                }
            }
        }
    }
}

int main(int argc, char *argv[]) {
    MPI_Init(&argc, &argv);  // Initialize the MPI environment

    int n_primes;
    int rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);  // Get the rank of this process

    // Only prompt the user for input in process 0
    if (rank == 0) {
        printf("Enter the number of primes to find (should match the number of processes): ");
        scanf("%d", &n_primes);
    }

    // Broadcast n_primes to all processes
    MPI_Bcast(&n_primes, 1, MPI_INT, 0, MPI_COMM_WORLD);

    parallel_sieve(n_primes);  // Run the parallel sieve function

    MPI_Finalize();  // Finalize the MPI environment
    return 0;
}
